version: 1.0.{build}.{branch}

build: off

environment:

  global:

    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: https://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\obvci_appveyor_python_build_env.cmd"

  matrix:

    # Pre-installed Miniconda versions, which AppVeyor may upgrade to
    # a later point release.
    # See: https://www.appveyor.com/docs/installed-software/#python
    # Borrowed from conda-forge recipes.

    - TARGET_ARCH: x86
      CONDA_PY: 27
      PY_CONDITION: "python >=2.7.13,<3"
      CONDA_INSTALL_LOCN: C:\\Miniconda
      TEST_TYPE: base

    - TARGET_ARCH: x86
      CONDA_PY: 35
      PY_CONDITION: "python=3.5"
      CONDA_INSTALL_LOCN: C:\\Miniconda35
      TEST_TYPE: base

    - TARGET_ARCH: x64
      CONDA_PY: 35
      PY_CONDITION: "python=3.5"
      CONDA_INSTALL_LOCN: C:\\Miniconda35-x64
      TEST_TYPE: base

    - TARGET_ARCH: x86
      CONDA_PY: 36
      PY_CONDITION: "python=3.6"
      CONDA_INSTALL_LOCN: C:\\Miniconda36
      TEST_TYPE: base

    - TARGET_ARCH: x64
      CONDA_PY: 36
      PY_CONDITION: "python=3.6"
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64
      TEST_TYPE: base

    - TARGET_ARCH: x64
      CONDA_PY: 27
      PY_CONDITION: "python >=2.7.13,<3"
      CONDA_INSTALL_LOCN: C:\\Miniconda-x64
      TEST_TYPE: cover

    - TARGET_ARCH: x64
      CONDA_PY: 27
      PY_CONDITION: "python >=2.7.13,<3"
      CONDA_INSTALL_LOCN: C:\\Miniconda-x64
      TEST_TYPE: functional

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }

  # Update paths for ``conda``.
  - cmd: set "OLDPATH=%PATH%"
  - cmd: set "PATH=%CONDA_INSTALL_LOCN%\\Scripts;%CONDA_INSTALL_LOCN%\\Library\\bin;%PATH%"

  # Update ``conda`` settings.
  - cmd: conda config --set show_channel_urls true
  - cmd: conda config --set always_yes true
  - cmd: conda config --set changeps1 false
  - cmd: conda config --add channels conda-forge

  # Make ``conda`` environment scoped for desired version.
  - cmd: conda update conda
  - cmd: conda create --name testing "%PY_CONDITION%"

  # Sleuth: ``conda`` install info.
  - cmd: conda --version
  - cmd: conda info --envs
  - cmd: conda info

  # Activate and update ``conda``.
  - cmd: set PYTHONUNBUFFERED=1
  - cmd: activate testing

  # Check that we have the expected version and architecture for Python
  - cmd: python --version
  - cmd: python -c "import struct; print(struct.calcsize('P') * 8)"

  # Install some of the "difficult" dependencies for ``bezier``.
  - cmd: conda install matplotlib numpy

  # Install ``bezier``.
  - "%CMD_IN_ENV% pip install ."

  # Install (hardcoded) test dependencies (should use ``nox``).

  # Install (hardcoded) conditional (on base) test dependencies.
  - ps: if ($env:TEST_TYPE -eq "base")
        {
          conda install pytest mock scipy;
        }

  # Install (hardcoded) conditional (on cover) test dependencies.
  - ps: if ($env:TEST_TYPE -eq "cover")
        {
          conda install pytest mock coverage pytest-cov scipy;
          $env:PYTHONPATH = "functional_tests/";
        }

  # Install (hardcoded) conditional (on functional) test dependencies.
  - ps: if ($env:TEST_TYPE -eq "functional")
        {
          conda install pytest mock;
          $env:PYTHONPATH = "functional_tests/";
        }

test_script:
  - ps: if ($env:TEST_TYPE -eq "base")
        {
          py.test tests;
        }
  - ps: if ($env:TEST_TYPE -eq "cover")
        {
          py.test `
              --cov=bezier `
              --cov=tests `
              --cov-fail-under=98 `
              tests `
              functional_tests/test_segment_box.py;
        }
  - ps: if ($env:TEST_TYPE -eq "functional")
        {
          py.test functional_tests
        }
